Valid Parenthesis
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.

Example 1:

Input: s = "()"
Output: true

Example 2:

Input: s = "()[]{}"
Output: true

Stack Approach

We use a stack and push the opening brackets whenever encountered
If we get a closing bracket we get the top element from stack if the element is the same as closing bracket we pop it
otherwise we return false as brackets do not match
lastly we also return false if the stack is not empty at the end

Code:
   bool isValid(string s) {
        stack<char> st;
        
        for(int i=0;i<s.size();i++){
          //pushing the opening brackets
            if(s[i]=='(' || s[i]=='{' || s[i]=='[')
                st.push(s[i]);
            else{
                //if we encounter an closing bracket and stack is empty that means there is no opening bracket so we return false
                if(st.empty())
                    return false;
                else{
                    char temp = st.top();
                    //if the brackets match we pop
                    if((temp=='(' && s[i]==')') || (temp=='{' && s[i]=='}') || (temp=='[' && s[i]==']'))
                        st.pop();
                    else
                        return false;
                }
            }
        }
        //checking if there are still elements left in the stack
        if(!st.empty())
            return false;
        
        return true;
    }
