Longest Consecutive Sequence

Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.

You must write an algorithm that runs in O(n) time.

Example 1:

Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.

Brute Force:
Sort the array and find the longest sequence using a traverse

Time Complexity -> O(NlogN)
Space Complexity -> O(1)

Code:
 int longestConsecutive(vector<int>& nums) {
        if(nums.size()==0)
            return 0;
        if(nums.size()==1)
            return 1;
        sort(nums.begin(),nums.end());
        int count = 1,ans = 0;
        int prev = nums[0];
        for(int i=1;i<nums.size();i++){
            if(nums[i]==prev+1)
                count++;
            else if(nums[i]!=prev)
                count=1;
            
            prev = nums[i];
            ans= max(ans,count);
        }
        
        return ans;
    }
    
    
Optimised Approach:
We will first push all are elements in the HashSet. 
Then we will run a for loop and check for any number(x) if it is the starting number of the consecutive sequence 
by checking if the HashSet contains (x-1) or not.
If ‘x’ is the starting number of the consecutive sequence we will keep searching for the numbers y = x+1, x+2, x+3, ….. 
And stop at the first ‘y’ which is not present in the HashSet. Using this we can calculate the length of the longest consecutive subsequence. 

Time Complexity -> O(N)
Space Complexity -> O(N)

Code:
int longestConsecutive(vector < int > & nums) {
  set < int > hashSet;
  for (int num: nums) {
    hashSet.insert(num);
  }

  int longestStreak = 0;

  for (int num: nums) {
    if (!hashSet.count(num - 1)) {
      int currentNum = num;
      int currentStreak = 1;

      while (hashSet.count(currentNum + 1)) {
        currentNum += 1;
        currentStreak += 1;
      }

      longestStreak = max(longestStreak, currentStreak);
    }
  }

  return longestStreak;
}
  
