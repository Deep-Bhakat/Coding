 Best Time to Buy and Sell Stock
 
 You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 
Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

//Brute Force
Run 2 loops and check for each element the maximum profit

Time Complexity -> O(n^2)
Space Complexity -> O(1)

//Optimal Approach
Take 2 variables
One minPrice to keep track of the minimum price at any day
Second profit to keep track of the maximum profit gained by selling the share at a day
Run a loop and keep track of the 2 variables 

Code :
    int maxProfit(vector<int>& prices) {
        int profit=0,minPrice=INT_MAX;
        
        for(auto i:prices){
            minPrice = min(i,minPrice);
            profit = max(profit,i-minPrice);
        }
        
        return profit;
    }
