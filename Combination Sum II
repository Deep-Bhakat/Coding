Combination Sum II

Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

Brute Recursion With Extra Space:
We can use a set DS to store the different combinations which will stay in sorted order.

Time Complexity -> O(2^N*klogn) to find the no of combinations will take 2^N time and to insert into array as base case will take klogn for set ds where k is the average space for array
Space Complexity -> O(k*x)

 void f(vector<int> &arr, int target, int idx, vector<int>ds, set<vector<int>>& ans){
        if(arr.size()<=idx){
            if(target==0){
                ans.insert(ds);
            }
            return;
        }
        ds.push_back(arr[idx]);
        f(arr, target-arr[idx], idx+1, ds, ans);
        ds.pop_back();
        f(arr, target, idx+1, ds, ans);
    }
    
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end());
        set<vector<int>> ans;
        vector<int > ds;
        f(candidates,target, 0, ds, ans);
        vector<vector<int>> v(ans.begin(), ans.end());
        return v;
    }
Optimal Approach:
We can sort the array and then find the nums

Time Complexity -> O(2^N*k) to find the no of combinations will take 2^N time and to insert into array as base case will take k where k is the average space for array
Space Complexity -> O(k*x) where x is the no of combinations and k is the length of a combination

void findCombination(int ind, int target, vector < int > & arr, vector<vector<int >> & ans, vector < int > & ds) {
      if (target == 0) {
        ans.push_back(ds);
        return;
      }
      for (int i = ind; i < arr.size(); i++) {
        if (i > ind && arr[i] == arr[i - 1]) continue;
        if (arr[i] > target) break;
        ds.push_back(arr[i]);
        findCombination(i + 1, target - arr[i], arr, ans, ds);
        ds.pop_back();
      }
}
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
      sort(candidates.begin(), candidates.end());
      vector < vector < int >> ans;
      vector < int > ds;
      findCombination(0, target, candidates, ans, ds);
      return ans;
    }
