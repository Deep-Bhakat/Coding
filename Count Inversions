Count Inversions

Given an array of integers. Find the Inversion Count in the array. 

Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If array is already sorted then the inversion count is 0. If an array is sorted in the reverse order then the inversion count is the maximum. 
Formally, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j.

Example 1:

Input: N = 5, arr[] = {2, 4, 1, 3, 5}
Output: 3
Explanation: The sequence 2, 4, 1, 3, 5 
has three inversions (2, 1), (4, 1), (4, 3).

//Brute Force
Run 2 loops and for each element count the no of pairs

Time Complexity -> O(n^2)
Space Complexity -> O(1)

//Optimal Approach
Use Enhanced Merge Sort

We have to modify the merge logic.
When we get 2 sorted array and we have to merge then we just have to check how many element in the first array is greater than the second array element,
those will count as inversions
Example :
[3,5] [2]
While merging them we can see 3 is greater than 2 and as it is an sorted array then all elements after 3 will also be greater than 2, so we increament the 
inversion count by 2

Time Complexity -> O(nlogn)
Space Complexity -> O(n) for the temporary array

**Note : This method modifies the array, so if you want to prevent it then use a temporary array and copy the elements of the original array

Code:
long long int merge(long long arr[],long long temp[],long long s,long long mid, long long e){
    long long i,j,k;
    long long int inv=0;
    i=s;  //index for the first array
    j=mid;  //index for the second array
    k=s; //index for the temp array
    //running loop till we traverse atleast one array fully
    while((i<=mid - 1) && (j<=e)){
        // if the first no is smaller than the second no we just add it to the temp array
        if(arr[i]<=arr[j]){
            temp[k++]=arr[i++];
        }else{
            //otherwise we increament inv 
            temp[k++]=arr[j++];
            inv+=(mid-i); //here (mid - i) are the no of elements in the first array which are greater than the second array element
        }        
    }
    //checking for elements left in either array
    while(i<=mid-1)
        temp[k++]=arr[i++];
    
    while(j<=e)
        temp[k++]=arr[j++];
        
     //modifing the original array
    for(i=s;i<=e;i++)
        arr[i]=temp[i];    
        
       return inv;
}

//normal merge sort function
long long int mergeSort(long long arr[],long long temp[],long long s,long long e){
    long long mid;
    long long int inv = 0;
    while(e>s){
      mid = (e+s) / 2;
      
      inv+= mergeSort(arr,temp,s,mid);
      inv+= mergeSort(arr,temp,mid+1,e);
      
      inv+=merge(arr,temp,s,mid+1,e);
    }
    
    return inv;
}
long long int inversionCount(long long arr[], long long N)
{
    //calling mergeSort with temp array
    long long temp[N];
    long long int inv=mergeSort(arr,temp,0,N-1);
    return inv;
}
