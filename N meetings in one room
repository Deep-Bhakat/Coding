N meetings in one room 

There is one meeting room in a firm. There are N meetings in the form of (start[i], end[i]) where start[i] is start time of meeting i and 
end[i] is finish time of meeting i.
What is the maximum number of meetings that can be accommodated in the meeting room when only one meeting can be held in the meeting room at a particular time?

Note: Start time of one chosen meeting can't be equal to the end time of the other chosen meeting.

Example 1:

Input:
N = 6
start[] = {1,3,0,5,8,5}
end[] =  {2,4,6,7,9,9}
Output: 
4
Explanation:
Maximum four meetings can be held with
given start and end timings.
The meetings are - (1, 2),(3, 4), (5,7) and (8,9)

Approach:
We can see that if we sort the ending time then we can take max meeting by comparing ending of one meeting to the starting of next meeting
We need to pick meetings which end early rather than meetings which end late.

Time Complexity -> O(NlogN)
Space Complexity -> O(N)

Code:
static bool compare(pair<int,int> a,pair<int,int> b){
        return a.second < b.second;
    }
    int maxMeetings(int start[], int end[], int n)
    {
        vector<pair<int,int> > v;
        
        for(int i=0;i<n;i++){
            v.push_back({start[i],end[i]});
        }
        
        //sorting
        sort(v.begin(),v.end(),compare);
        
        int ans = 1;
        int timeLimit = v[0].second;
        
        for(int i=1;i<n;i++){
            if(v[i].first>timeLimit){
                ans++;
                timeLimit = v[i].second;
            }
        }
        return ans;
    }
    
 Without using compare function:
 We can take end as first element in pair so no need of compare function
 
 int maxMeetings(int start[], int end[], int n)
    {
        vector<pair<int,int> > v;
        
        for(int i=0;i<n;i++){
            v.push_back({end[i],start[i]});
        }
        
        //sorting
        sort(v.begin(),v.end());
        
        int ans = 1;
        int timeLimit = v[0].first;
        
        for(int i=1;i<n;i++){
            if(v[i].second>timeLimit){
                ans++;
                timeLimit = v[i].first;
            }
        }
        return ans;
    }

