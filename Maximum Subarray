Maximum Subarray
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

//Brute Force
Find all the subarrays and find the maximum sum
It requires 3 loops

Time Complexity -> O(n^3)
Space Complexity -> O(1)

//Better Approach
In the brute force remove the third loop and replace it with 2 pointers

Time Complexity -> O(n^2)
Space Complexity -> O(1)

//Kadane's Algo
This algo says that if sum reaches<0 then we cant form a maximum subarray, so as it reaches < 0 we change it to 0
Initialize ans with the first element and sum to 0
Run a loop and add element to sum
Replace ans with the max of sum and ans
Replace sum with the max of sum and 0

Time Complexity -> O(n)
Space Complexity -> O(1)

  int maxSubArray(vector<int>& nums) {
    int sum = 0;
    int ans = nums[0];
    
    for(auto i: nums){
      sum+=i;
      ans=max(sum,ans);
      sum=max(sum,0);
    }
    return ans;
  }
