4Sum

Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

Example 1:

Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

Brute Force:
Use 4 loops to calculate quards and set data structure to store unique quards.

Time complexity -> O(N^4)
Space Complexity -> (4*M) M = no of unique quards

Sorting & Using 3 pointers and Binary Search:
Sort the array
Use 3 pointers to point to 3 numbers and then use Binary Search on the right part of the array
Use Set data structure to store unique quards

Time complexity -> O(N^3logN + NlogN)
Space Complexity -> (4*M) M = no of unique quards

Optimized approach (Sort and 2 pointers):
Sort the array
Use two pointers pointing to first 2 elements
Then use left pointer pointing to j + 1 and right pointer pointing to end of the array
If target is less than the sum of the 4 numbers then left++ , check if there are duplicates and skip all the duplicates
If target is greater than the sum of the 4 numbers then right-- , check if there are duplicates and skip all the duplicates
Is target matches then add all the four numbers into the result array


Time complexity -> O(N^3 + NlogN)
Space Complexity -> (4*M) M = no of unique quards

Code:
 vector<vector<int>> fourSum(vector<int>& nums, int target) {
        sort(nums.begin(),nums.end());
        vector<vector<int>> ans;

        if (nums.empty())
            return ans;
        int i = 0;
        int n = nums.size();
        
        for (int i = 0; i < n; i++) {
            long long int target1 = target - nums[i];
            for (int j = i + 1; j < n; j++) {
                long long int target2 = target1 - nums[j];
                int left = j + 1;
                int right = n - 1;
                
                while(left<right){
                    long long int target3 = nums[left] + nums[right];
                    if(target3 < target2)
                    {
                        int el = nums[left];
                        //skipping all the duplicates
                        while(left < right && el==nums[left])
                            left++;
                    }else if(target3 > target2){
                        int el = nums[right];
                        //skipping all the duplicates
                        while(left < right && el==nums[right])
                            right--;
                    }else{
                        vector<int> temp;
                        temp.push_back(nums[i]);
                        temp.push_back(nums[j]);
                        temp.push_back(nums[left]);
                        temp.push_back(nums[right]);
                        
                        ans.push_back(temp);
                        // Skipping the duplicates of number 3
                        while (left < right && nums[left] == temp[2]) ++left;
                    
                        // Skipping the duplicates of number 4
                        while (left < right && nums[right] == temp[3]) --right;
                
                    }
                        
                }
                //Skipping duplicates
            while(j + 1 < n && nums[j + 1] == nums[j]) ++j;

            }
            //Skipping duplicates
            while(i + 1 < n && nums[i + 1] == nums[i]) ++i;

        }
        return ans;
    }
