Linked List Cycle

Given head, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. 
Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

Return true if there is a cycle in the linked list. Otherwise, return false.

Example:

Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).

Brute Force:
Use a hashmap or set to check if the node has been visited or not

Time Complexity -> O(N)
Space Complexity -> O(N)

Optimal Approach:
We can use slow and fast pointers, slow will move one step at a time while fast will move 2 steps at a time
If there is a loop then both the pointers will meet at some point.
Otherwise they will be null

Time Complexity -> O(N)
Space Complexity -> O(1)

Code:
 bool hasCycle(ListNode *head) {
        if(!head || !head->next)
            return false;
        ListNode *slow = head,*fast = head->next;
        
        while(slow!=NULL && fast->next!=NULL){
            slow=slow->next;
            fast=fast->next;
            if(fast->next!=NULL)
                fast=fast->next;
            if(slow==fast)
                return true;
            
        }
        
        return false;
    }
 
