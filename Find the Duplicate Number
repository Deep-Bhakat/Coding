Find the Duplicate Number

Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2

Brute Force:

Sort the array 
Then traverse the array and check for duplicate using arr[i]==arr[i+1]

Time Complexity -> O(nlogn) + O(n) = O(nlogn)
Space Complexity -> O(1)

Using Frequency Array:

Create a frequency array and store the frequencies of all the elements
Then traverse the frequency array and find whose frequency is greater than 1

Time Complexity -> O(n)
Space Complexity -> O(n)

Linked List Cycle Method:
We apply the tortoise and hare method to find the duplicate element
Whenever we find a element we go to arr[element] for slow and 
For fast we go to arr[arr[element]] that is 2 steps
We exit after the elements match
Now we make fast = nums[0]
Again we run a loop until fast and slow match
Whenever they match we return the element

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int slow=nums[0];
        int fast=nums[0];
        
        //finding if there is a loop
        //using do while because at starting fast and slow are same 
        do{       
            slow = nums[slow];            
            fast = nums[nums[fast]];
        } while(slow!=fast);
        
        //setting fast to starting
        fast = nums[0];
        //running loop until slow = fast
        while(slow!=fast){
            slow = nums[slow];            
            fast = nums[fast];
        }
        return slow;
    }
};
