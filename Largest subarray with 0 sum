Largest subarray with 0 sum 

Given an array having both positive and negative integers. The task is to compute the length of the largest subarray with sum 0.

Example 1:

Input:
N = 8
A[] = {15,-2,2,-8,1,7,10,23}
Output: 5
Explanation: The largest subarray with
sum 0 will be -2 2 -8 1 7.

Brute Force:
Find all the subarrays and then find the longest one with 0 sum.

Time Complexity -> O(N^2)
Space Complexity -> O(N)

Code:
int solve(int[] a){
	int  max = 0;
	for(int i = 0; i < a.length; ++i){
		int sum = 0;
		for(int j = i; j < a.length; ++j){
			sum += a[j];
			if(sum == 0){
				max = Math.max(max, j-i+1);
			}
		}
	}
	return max;
 }
 
 Optimal Approach:
 We see a pattern that we get equal prefix sums while iterating through the array so we can use a hashmap to check if the sum exists in the hashmap
 If it does then we store the max of i - hashmap[sum] 
 If sum == 0:
 that means untill that point the sum is 0
 
 Time Complexity -> O(N)
 Space Complexity -> O(N)
 
 Code:
 int maxLen(vector<int>&A, int n)
    {   
        // Your code here
        unordered_map<int,int> m;


        int longest = 0;
        int sum = 0;
        for(int i=0;i<n;i++){
            sum+=A[i];
            
            if(sum==0)
                longest = i+1;
            else{
                if(m.find(sum)!=m.end()){
                    longest = max(longest, i-m[sum]);
                }else{
                    m[sum]=i;
                }
            }
                
        }
        
        return longest;
    }
