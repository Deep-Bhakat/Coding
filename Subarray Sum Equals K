Subarray Sum Equals K
Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

A subarray is a contiguous non-empty sequence of elements within an array. 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2

//Brute Force
Find all the subarrays and find the maximum sum
It requires 3 loops

Time Complexity -> O(n^3)
Space Complexity -> O(1)

//Better Approach
In the brute force remove the third loop and replace it with 2 pointers

Time Complexity -> O(n^2)
Space Complexity -> O(1)

//Prefix Sum approach
Here we maintain an array called prefixSum which stores the sum until that element
Then we use a unordered map to check if there exists a element prefixSum[i] - k in the map
if yes then index of that element + 1 to i is the subarray with sum k

Time Complexity -> O(n) + O(n) = O(n)
Space Complexity -> O(n) + O(n) = O(n)

Code :
int subarraySum(vector<int>& nums, int k) {
        vector<int> prefix(nums.size(),0);
        prefix[0]=nums[0];
        
        //making the prefix sum array
        for(int i=1;i<nums.size();i++)
            prefix[i]=prefix[i-1]+nums[i];
      
        unordered_map<int,int> m;
        int ans = 0;
        
        for(int i=0;i<prefix.size();i++){
            //checking if the element is equal to the sum
            if(prefix[i]==k)
                ans++;
            //if prefix[i]-k exists we add no of times it came
            if(m.find(prefix[i]-k)!=m.end())
                ans+= m[prefix[i]-k];
            
            
            m[prefix[i]]++;
            
        }
        return ans;
    }
