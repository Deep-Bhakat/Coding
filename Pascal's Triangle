118. Pascal's Triangle

Given an integer numRows, return the first numRows of Pascal's triangle.

Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]

//Approach
If you observe carefully, all the levels of Pascal's triangle have 1 as the start and 1 as the end
And between them the numbers are the sum of its upper left number and upper number
Example
      1
   1     1
  1   2   1
1   3   3   1
Here we can see the second element of the 4th row is the sum of the first element of the 3rd row and the second element of the 3rd row,i.e, (i-1) and (i)

Time Complexity -> O(n^2)
Space Complexity -> O(n) if we have to return the pascal's triangle otherwise O(n^2)
Code:
   vector<vector<int>> generate(int numRows) {
      vector<vector<int>> ans;
      
      for(int i=0;i<numRows;i++){
        //creating a vector with all 1's of length level + 1, as our level start from 0
        vector<int> row(i+1,1); 
        //running a loop from the 1st element to the 2nd last element as only those numbers need to be changed
        for(int j=1;j<i;j++){
          //adding the upper left no and the upper no
          nums[j] = ans[i-1][j-1] + ans[i-1][j];
        }
        ans.push_back(nums);
      }
      return ans;
   }
