Linked List Cycle II

Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. 
Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. 
Note that pos is not passed as a parameter.

Do not modify the linked list.
Example:

Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.

Brute Force:
Use a hashmap or set to check if the node has been visited or not and return it

Time Complexity -> O(N)
Space Complexity -> O(N)

Optimal Approach:
We can use slow and fast pointers, slow will move one step at a time while fast will move 2 steps at a time
If there is a loop then both the pointers will meet at some point.
Otherwise they will be null
After they match, we make either fast or slow as head and then move both pointers till they match again
The point of their matching is the starting of the loop

Time Complexity -> O(N)
Space Complexity -> O(1)

Code:
 ListNode *detectCycle(ListNode *head) {
        if(head==NULL || head->next == NULL)
                return NULL;
        
        ListNode* slow = head, *fast = head;
        //using tortoise and rabbit method
        while(fast!=NULL && fast->next!=NULL){
            slow = slow->next;
            fast = fast->next->next;
            if(slow==fast)
                break;
        }
        //if slow == fast then we make slow as head and then make them move one place 
        //at a time
        if(slow==fast){
        slow = head;
        while(slow!=fast){
            slow=slow->next;
            fast=fast->next;
        }
            //whenever they meet it is the loop starting point
        return slow;
        }
        return NULL;
}
