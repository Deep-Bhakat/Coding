Add Two Numbers

You are given two non-empty linked lists representing two non-negative integers. 
The digits are stored in reverse order, and each of their nodes contains a single digit. 
Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

Approach:
Use sum and carry approach to calculate

Time Complexity -> O(max(m,n))
Space Complexity -> O(max(m,n))

Code:
 ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* dummy = new ListNode(-1);
        ListNode* ans = dummy;
        int sum,carry=0;
        while(l1!=NULL && l2!=NULL){
            sum = l1->val + l2->val + carry;
            carry = sum/10;
            sum = sum%10;
            ListNode* node = new ListNode(sum);
            dummy->next = node;
            dummy = dummy->next;
            l1=l1->next;
            l2=l2->next;
        }
        while(l1!=NULL){
            sum = l1->val + carry;
              carry = sum / 10;
            sum = sum % 10;          
            ListNode* node = new ListNode(sum);
            dummy->next = node;
            dummy = dummy->next;
            l1=l1->next; 
        }
        while(l2!=NULL){
            sum = l2->val + carry;
            carry = sum / 10;
            sum = sum % 10;
            ListNode* node = new ListNode(sum);
            dummy->next = node;
            dummy = dummy->next;
            l2=l2->next; 
        }
        if(carry){
           ListNode* node = new ListNode(carry);
            dummy->next = node;
            dummy = dummy->next; 
        }
        return ans->next;
    }
