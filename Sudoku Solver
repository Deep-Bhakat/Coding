Sudoku Solver

Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
The '.' character indicates empty cells.

Input: board = [["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],
[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],
["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],
[".",".",".",".","8",".",".","7","9"]]
Output: [["5","3","4","6","7","8","9","1","2"],["6","7","2","1","9","5","3","4","8"],["1","9","8","3","4","2","5","6","7"],
["8","5","9","7","6","1","4","2","3"],["4","2","6","8","5","3","7","9","1"],["7","1","3","9","2","4","8","5","6"],
["9","6","1","5","3","7","2","8","4"],["2","8","7","4","1","9","6","3","5"],["3","4","5","2","8","6","1","7","9"]]
Explanation: The input board is shown above and the only valid solution is shown below

Recursion:
We can traverse through all the positions and if it is empty then we try to place a number after checking if it is valid.
IF the configuration is wrong then we backtrack to the correct configuration.

Time Complexity -> O(9^(n^2))
Space Complexity -> O(1)

Code:
class Solution {
public:
    bool solve(vector<vector<char>>& board){
        //loop to traverse through the board
        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[0].size();j++){
                
                //check if position is empty
                if(board[i][j]=='.'){
                    //loop to check which number to insert
                    for(char c='1';c<='9';c++){
                        //check if number is valid to be placed
                        if(isValid(board,i,j,c)){
                            board[i][j]=c;
                            //calling the function for other empty positions
                            if(solve(board))
                                return true;
                            else
                                board[i][j]='.';
                        }
                            
                    }
                    //if it cannot be filled
                    return false;
                }
            }
        }
        return true;
    }
    bool isValid(vector<vector<char>>& board,int row,int col,int c){
        for(int i=0;i<9;i++){
            //check for row
            if(board[row][i]==c) return false;
            //check for column
            if(board[i][col]==c) return false;
            
            //check for the current box
            if(board[3 * (row/3) + i/3][3 * (col/3) + i%3]==c) return false;
        }
        return true;
    }
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }
};
