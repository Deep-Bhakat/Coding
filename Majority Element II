Majority Element II

Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 3⌋ times. You may assume that the majority element always exists in the array.

Example 1:

Input: nums = [3,2,3]
Output: [3]

Brute Force:
Check the occurance of elements one by one using 2 loops

Time Complexity -> O(n^2)
Space Complexity -> O(1)

Using extra space:

Use a map to store occurances of elements
Traverse the map and return elements with count > n/2

Time Complexity -> O(n)
Space Complexity -> O(n)

Code:
 int majorityElement(vector<int>& nums) {
       unordered_map<int,int> m;
        for(auto i:nums)
            m[i]++;
        
        for(auto i: m)
            if(i.second>nums.size()/3)
                return i.first;
        
        return -1;
 }
 
 Without extra space:
 We can say there will be at max 2 majority elements 
 Say n = 10
 10/3 = 3
 So more than n/3 means > 3 so at max there will be 4,4,2 count of elements so 2 majority elements
 
 We take 4 variables count1 count2 element1 and element2
 We use the same approach as in majority element I to check the count of elements
 
Time Complexity -> O(n)
Space Complexity -> O(1)

Code:
 vector<int> majorityElement(vector<int>& nums) {
        vector<int> ans;
        int count1=0,count2=0,el1=-1,el2=-1;
        
        for(auto i:nums){
            if(el1==i) count1++;
            else if(el2==i) count2++;
            else if(count1==0){ el1 = i; count1=1;}
            else if(count2==0){ el2 = i;  count2=1;}
            else{
                count1--;
                count2--;
            }
        }
        count1 = 0;
        count2 = 0;
        for(auto i:nums){
            if(el1==i) count1++;
            else if(el2==i) count2++;
        }
        if(count1>nums.size()/3)
            ans.push_back(el1);
        if(count2>nums.size()/3)
            ans.push_back(el2);
     
        return ans;
    }
 
