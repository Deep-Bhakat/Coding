Rotate Image
You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

Brute Force:
Take a dummy matrix and copy the first row to the last column of the dummy matrix and so on.

Time complexity -> O(n^2)
Space Complexity -> O(n^2)
Approach
The simple approach is first to transpose the matrix and then reverse each row of the matrix

Example:
[1,2,3],[4,5,6],[7,8,9]

After Transpose:
[1,4,7],[2,5,8],[3,6,9]

After reversing each row:
[7,4,1],[8,5,2],[9,6,3]

Time Complexity-> O(n^2)
Space Complexity -> O(1)

Code:
 void rotate(vector<vector<int>>& matrix) {
                int n=matrix.size(),m=matrix[0].size();

        //transpose the matrix
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                 if(i<j){
                    swap(matrix[i][j],matrix[j][i]);
                }
            }
        }
        
        //reverse each row
         for(int i=0;i<n;i++){
             int x = 0;
             int y = m-1;
            for(int j=0;j<m;j++){
                while(x<y){
                    swap(matrix[i][x++],matrix[i][y--]);
                }
            }
        }
        
        
    }
