Question 
A permutation of an array of integers is an arrangement of its members into a sequence or linear order.

For example, for arr = [1,2,3], the following are considered permutations of arr: [1,2,3], [1,3,2], [3,1,2], [2,3,1].
The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).

For example, the next permutation of arr = [1,2,3] is [1,3,2].
Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.
Given an array of integers nums, find the next permutation of nums.

The replacement must be in place and use only constant extra memory.

Example 1:

Input: nums = [1,2,3]
Output: [1,3,2]
Example 2:

Input: nums = [3,2,1]
Output: [1,2,3]

// Brute Force Approach
If using C++ we can use the inbuilt next_permutation function
otherwise the approach will be to find all the permutations and then search for the element and return the next element

Time Complexity -> O(N! * N) to find all the permutations
Space Complexity -> O(1)

//Optimized Approach

Intuition:
Every array is increasing from the end
Algorithm:
So we find the first element which is smaller than the next element to it and store the index in index1
Now we find the first element greater than the index1 element and store it in index2
Now swap both the elements to make the first part of the array lexographically increasing
Lastly, reverse the elements after index1 to make it increasing which will be the next permutation

Time Complexity -> O(n) + O(n) + O(n) = O(n)
Space Complexity -> O(1)
Example:
 [1,3,5,4,2]
 We find 3 as the element smaller than its neighbour, so index1 = 1
 Now we find 4 as the element greater than 3, so index2 = 3
 After swapping array becomes
 [1,4,5,3,2]
 After reversing
 [1,4,2,3,5]
 
Code:
  void nextPermutation(vector<int>& nums) {
     int index1 = -1,index2= -1;
        //find the first decreasing no
        for(int i=nums.size()-2;i>=0;i--){
            if(nums[i]<nums[i+1]){
                index1=i;
                break;
            }
        }
        //edge case if the array is in decreasing order we do not find a breakpoint, so index1 = -1, so we just reverse it 
        if(index1<0)
            reverse(nums.begin(),nums.end());
        else{
        //find the first greater no
        for(int i=nums.size()-1;i>=index1;i--){
            if(nums[i]>nums[index1]){
                index2=i;
                break;
            }
        }
        
        //swap both
        swap(nums[index1],nums[index2]);
        
        //reverse the array after index1
                reverse(nums.begin()+index1+1,nums.end());
        
        }
    }
