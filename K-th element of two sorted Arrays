K-th element of two sorted Arrays

Given two sorted arrays arr1 and arr2 of size N and M respectively and an element K. 
The task is to find the element that would be at the k’th position of the final sorted array.

Example 1:

Input:
arr1[] = {2, 3, 6, 7, 9}
arr2[] = {1, 4, 8, 10}
k = 5
Output:
6
Explanation:
The final sorted array would be -
1, 2, 3, 4, 6, 7, 8, 9, 10
The 5th element of this array is 6.
Example 2:
Input:
arr1[] = {100, 112, 256, 349, 770}
arr2[] = {72, 86, 113, 119, 265, 445, 892}
k = 7
Output:
256
Explanation:
Final sorted array is - 72, 86, 100, 112,
113, 119, 256, 265, 349, 445, 770, 892
7th element of this array is 256.

Brute Force:
We can create an extra array of size m + n and store all the elements in sorted way.

Time Complexity -> O(m+n)
Space Complexity -> O(m+n)

Optimal Brute Force:
We can prevent creating of extra array and just use a count variable to count the number

Time Complexity -> O(m+n)
Space Complexity -> O(1)

Optimal Binary Search Approach:
Apply binary search in an array with a small size. Start iterating with two pointers, say left and right.
Find the middle of the range. Take elements from low to middle of array1 and the remaining elements from the second array. 
Then using the condition mentioned above, check if the left half is valid. If valid, print the maximum of both array’s last element. 
If not, move the range towards the right if l2 > r1, else move the range towards the left if l1 > r2.

Time Complexity -> O(log(n+m))
Space Complexity -> O(1)

Code:

int kthElement(int arr1[], int arr2[], int n, int m, int k)
    {
        if(m>n){
            return kthElement(arr2,arr1,m,n,k);
        }
        
        int low = max(0,k-m),high=min(k,n);
        while(low<=high){
            int cut1 = (low + high) >> 1; 
            int cut2 = k - cut1; 
            int l1 = cut1 == 0 ? INT_MIN : arr1[cut1 - 1]; 
            int l2 = cut2 == 0 ? INT_MIN : arr2[cut2 - 1];
            int r1 = cut1 == n ? INT_MAX : arr1[cut1]; 
            int r2 = cut2 == m ? INT_MAX : arr2[cut2]; 
                
            if(l1 <= r2 && l2 <= r1) {
                return max(l1, l2);
            }
            else if (l1 > r2) {
                high = cut1 - 1;
            }
            else {
                low = cut1 + 1; 
            } 
        }
        return 1;
    }
