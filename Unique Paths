Unique Paths

There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). 
The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 109.

Example 1:

Input: m = 3, n = 7
Output: 28

Brute Force:
Use recursion to find all the possible paths
Return 1 if we go to the finish line
Return 0 if we cross the boundary

Time complexity -> O(n!)
Space complexity -> Stack space of recursion tree

Dynamic programming approach:
Convert the recursion into DP

Time complexity -> O(n*m)
Space Complexity -> O(n*m)

Code:
int helper(int i,int j,int n,int m,vector<vector<int>> &dp){
        
        if(i==(n-1)&&j==(m-1)) return 1;
        if(i>=n||j>=m) return 0;
        if(dp[i][j]!=-1) return dp[i][j];
     else return dp[i][j]=helper(i+1,j,n,m,dp)+helper(i,j+1,n,m,dp);

    }
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m+1,vector<int>(n+1,-1));
        int num=helper(0,0,m,n,dp);
        if(m==1&&n==1)
            return num;
        
        return dp[0][0];

    }
   
   
 Optimal Approach:
 
    The approach of this solution is very simple just use a for loop to calculate the m+n-2Cn-1  or m+n-2Cm-1 
    Time Complexity -> O(n-1) or O(m-1)
    Space Complexity -> O(1)
    Code:
    
      int uniquePaths(int m, int n) {
            int N = n + m - 2;
            int r = m - 1; 
            double res = 1;
            
            for (int i = 1; i <= r; i++)
                res = res * (N - r + i) / i;
            return (int)res;
    }
