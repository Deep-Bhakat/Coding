Two Sum

Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

Brute Force:
Use 2 loops to find all possible combinations for each number and return it

Time Complexity -> O(n^2)
Space Complexity -> O(1)

Two-Pointer Approach:
We can use extra array and sort it
Then we use 2 pointers to find the numbers which equal to target
Then we traverse through the original array and find the indices 

Time Complexity -> O(nlogn)
Space Complexity -> O(n)

Using Hashmap:
Intuition:
There will one number which is equal to target - arr[i] in the array.

We can use a hashmap to find target - arr[i] in one traversal

Time Complexity -> O(n)
Space Complexity -> O(n)

Code:
 vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> indices;
        
        unordered_map<int,int> m;
        
        for(int i=0;i<nums.size();i++){
            //if found a number we push back the indices
            if(m.find(target-nums[i])!=m.end()){
                indices.push_back(m.find(target-nums[i])->second);
                indices.push_back(i);
            }
            //we just add the number in map
            m[nums[i]]=i;
        }
        
        return indices;
    }
