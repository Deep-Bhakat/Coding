Job Sequencing Problem

Given a set of N jobs where each jobi has a deadline and profit associated with it.
Each job takes 1 unit of time to complete and only one job can be scheduled at a time. 
We earn the profit associated with job if and only if the job is completed by its deadline.
Find the number of jobs done and the maximum profit.

Note: Jobs will be given in the form (Jobid, Deadline, Profit) associated with that Job.

Example 1:

Input:
N = 4
Jobs = {(1,4,20),(2,1,10),(3,1,40),(4,1,30)}
Output:
2 60
Explanation:
Job1 and Job3 can be done with
maximum profit of 60 (20+40).

Approach:
We need to use a greedy approach to maximise profit
So we sort the array 
Then for each job we try to assign it at the last day of its deadline,if it is not available then any other day previous of it.

Code:
 static bool compare(Job a,Job b){
        return a.profit>b.profit;
    }
    vector<int> JobScheduling(Job arr[], int n) 
    { 
        //sort the job array
        sort(arr,arr+n,compare);
        vector<int> ans;
        int maxD = 0;
        for(int i=0;i<n;i++){
            maxD=max(maxD,arr[i].dead);
        }
        vector<int> m(maxD+1,-1);
        int countJobs = 0, jobProfit = 0;
        for(int i=0;i<n;i++){
            for(int j=arr[i].dead;j>0;j--){
                if(m[j]==-1){
                    countJobs++;
                    m[j]=i;
                    jobProfit+=arr[i].profit;
                    break;
                }
            }
            
        }
        
       ans.push_back(countJobs);
       ans.push_back(jobProfit);
       return ans;
    } 
