Flattening a Linked List 

Given a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:
(i) a next pointer to the next node,
(ii) a bottom pointer to a linked list where this node is head.
Each of the sub-linked-list is in sorted order.
Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order. 
Note: The flattened list will be printed using the bottom pointer instead of next pointer.

Example:

Input:
5 -> 10 -> 19 -> 28
|     |     |     | 
7     20    22   35
|           |     | 
8          50    40
|                 | 
30               45
Output:  5-> 7-> 8- > 10 -> 19-> 20-> 22-> 28-> 30-> 35-> 40-> 45-> 50

Brute Force:
We can store every element and then sort them.

Time Complexity -> O(NlogN) where N is the length of all the elements
Space Complexity -> O(N)

Optimal Approach:
We can use merge 2 linked list and recursion.
We just need to merge 2 corresponding lists together and then the next one and so on.

Time Complexity -> O(N)
Space Complexity -> O(1) or stack space 

Code:
    Node* mergeTwoLists(Node* a, Node* b) {
    
    Node *temp = new Node(0);
    Node *res = temp; 
    
    while(a != NULL && b != NULL) {
        if(a->data < b->data) {
            temp->bottom = a; 
            temp = temp->bottom; 
            a = a->bottom; 
        }
        else {
            temp->bottom = b;
            temp = temp->bottom; 
            b = b->bottom; 
        }
    }
    
    if(a) temp->bottom = a; 
    else temp->bottom = b; 
    
    return res -> bottom; 
    
}
Node *flatten(Node *root)
{
   // Your code here
   if(!root)
    return root;
    
    root->next = flatten(root->next);
    
    root = mergeTwoLists(root,root->next);
    
    return root;
}
