Search a 2D Matrix

This problem has 2 variations 
1) Row wise sorted
2) Row & Column wise sorted

Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.

Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Brute Force:
Do a linear search and find the element

Time Complexity -> O(N*M)
Space Complexity -> O(1)

A better binary search approach:
For each row do a binary search to find the element

Time Complexity -> O(N * log M)
Space Complexity -> O(1)

Optimal approach (For row & column wise sorted):
Make i = 0 and j = last element of first row
if element is greater than j then increase i
else decrease j

Time complexity -> O(N+M)
Space Complexity -> O(1)

Code:
  bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
        int row=matrix.size();
        int col=matrix[0].size();
        
        int i=0,j=col-1;
        
        while(i<row && j>=0){
            if(matrix[i][j]==target)
                    return true;
            else if(matrix[i][j]>target)
                j--;
            else
                i++;
        }
        return false;
    }

Optimal Approach (For row wise sorted):
We can see that the elements when placed in a array are sorted so we can apply binary search on them just we need to reduce the extra space.
We can get the index of matrix by :
Say index of imaginary array is 5
Then matrix index will be
[5/col size][5%col size] = [1][1]

Time complexity -> O(log(N*M))
Space Complexity -> O(1)

Code:
 bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
        int row=matrix.size();
        int col=matrix[0].size();
        
        int i=0,j=row*col-1;
        
        while(i<=j){
            int mid = (j-i)/2 + i;
            if(matrix[mid/col][mid%col]==target)
                return true;
            else if(matrix[mid/col][mid%col]> target){
                j=mid-1;
            }else{
                i=mid+1;
            }
        }
        return false;
    }
